# -*- coding: utf-8 -*-
"""SimpleAgent_Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sUYpOKDyVJjBUmoOF4e6Foj--MD1f8wR

Tutorial on buildin simple Agent with LangChain. Based on:

https://python.langchain.com/docs/use_cases/chatbots/
"""

## Uncomment below to instal newest versiono f langchain
# !pip install --upgrade --quiet  langchain langchain-openai

import os

# Define API key for OPenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

"""# An agent is just a chatbot that can use tools.

Tools being code that allows the LLM to interact with systems outside of its session. You can use pre-defined tools or define custom ones. There are also different agent types which have different purposes.

https://python.langchain.com/docs/integrations/tools/ <br>
https://python.langchain.com/docs/modules/agents/tools/custom_tools <br>
https://python.langchain.com/docs/modules/agents/agent_types/<br>
https://react-lm.github.io/

Lets start with a simple agent that can use a tool for Shell command sand bash scripting.The LLM can use it to execute any shell commands. A common use case for this is letting the LLM interact with your local file system.

Note: Shell tool does not work with Windows OS.
"""

# Import tool
from langchain.tools import ShellTool

shell_tool = ShellTool()

# Print tool description
shell_tool.name
shell_tool.description
shell_tool.args

## Example usage of shell tool
print(shell_tool.run({"commands": ["echo 'Hello World!'", "pwd"]}))

## Load default OpenAI chatbot
from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor,create_react_agent # To load simple ReAct agent. Reason an act
from langchain import hub

## Define LLM
llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.0)

# Define list of tools the LLM is going to use
tools = [shell_tool]

# Get the template prompt to use - you can modify this!
prompt = hub.pull("hwchase17/react")

## Read the prompt template
print(prompt)

## Construct the ReAct agent by defining the llm, tools and prompt template
shell_Agent = create_react_agent(llm=llm,tools=tools,prompt=prompt)

# Create an agent executor by passing in the agent and tools
agent_executor = AgentExecutor(agent=shell_Agent, tools=tools, verbose=True)

## Run the agent executor

input = 'What are the files in the current working directory?'
response = agent_executor.invoke({"input":str(input)})
response

response['output']

